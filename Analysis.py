# -*- coding: utf-8 -*-
"""Flipkart_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uUlanUxhCtK48zRGtMClDW_LE1Fb5hWJ
"""

# DAP Mini Project: Flipkart E-commerce Analysis (Updated)
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler

# Load data
file_path = '/content/flipkart_sales_data.csv'
df = pd.read_csv(file_path)
print("Initial Shape:", df.shape)

# Preprocessing
# Handle missing values and "No rating available"
df['product_rating'] = df['product_rating'].replace('No rating available', np.nan)
df['overall_rating'] = df['overall_rating'].replace('No rating available', np.nan)
df['retail_price'] = df['retail_price'].fillna(df['retail_price'].median())
df['discounted_price'] = df['discounted_price'].fillna(df['discounted_price'].median())
df['discount_percentage'] = df['discount_percentage'].fillna(df['discount_percentage'].median())
df['brand_length'] = df['brand_length'].fillna(0)
df['brand'] = df['brand'].fillna('Unknown')
df['has_image'] = df['has_image'].fillna(False)
df['rating_available'] = df['rating_available'].fillna(False)
df['is_clothing'] = df['is_clothing'].fillna(False)
df['is_FK_Advantage_product'] = df['is_FK_Advantage_product'].fillna(False)
df.fillna('Unknown', inplace=True)

# Rename columns
df.columns = df.columns.str.lower().str.replace(' ', '_')
print("\nColumns after renaming:", df.columns.tolist())

# Remove duplicates
df = df.drop_duplicates().copy()
print("Shape after duplicates:", df.shape)

# Date conversion
# Debug: Inspect crawl_timestamp
print("\nSample crawl_timestamp values:")
print(df['crawl_timestamp'].head().tolist())
print("crawl_timestamp dtype before:", df['crawl_timestamp'].dtype)

# Convert to datetime
df['crawl_timestamp'] = pd.to_datetime(df['crawl_timestamp'], errors='coerce')

# Check for failures
if df['crawl_timestamp'].isna().any():
    print("Warning: Some timestamps failed to parse. Filling with default date.")
    df['crawl_timestamp'] = df['crawl_timestamp'].fillna(pd.Timestamp('2015-12-01'))

# Verify conversion
print("crawl_timestamp dtype after:", df['crawl_timestamp'].dtype)
if not np.issubdtype(df['crawl_timestamp'].dtype, np.datetime64):
    raise ValueError("crawl_timestamp is not datetime!")

# Extract datetime components
df.loc[:, 'year'] = df['crawl_timestamp'].dt.year
df.loc[:, 'month'] = df['crawl_timestamp'].dt.month
df.loc[:, 'day'] = df['crawl_timestamp'].dt.day
df.loc[:, 'hour'] = df['crawl_timestamp'].dt.hour
df.loc[:, 'weekday'] = df['crawl_timestamp'].dt.weekday
df.loc[:, 'month_name'] = df['crawl_timestamp'].dt.strftime('%B')

# Derived columns
df.loc[:, 'category_level1'] = df['product_category_tree'].str.extract(r'\["([^>]+)\s*>>')
df.loc[:, 'category_level1'] = df['category_level1'].fillna('Unknown')
df.loc[:, 'is_electronics'] = df['category_level1'].str.contains('electronics|mobile|computer', case=False, na=False).astype(int)
df.loc[:, 'is_jewelry'] = df['category_level1'].str.contains('jewelry|jewellery', case=False, na=False).astype(int)
df.loc[:, 'is_fk_advantage'] = df['is_fk_advantage_product'].map({True: 1, False: 0})
df.loc[:, 'description_length'] = df['description'].str.len()
df.loc[:, 'has_brand'] = (df['brand'] != 'Unknown').astype(int)
df.loc[:, 'price_diff'] = df['retail_price'] - df['discounted_price']
df.loc[:, 'is_high_price'] = (df['retail_price'] > df['retail_price'].median()).astype(int)
df.loc[:, 'category_length'] = df['product_category_tree'].str.len()
df.loc[:, 'is_december'] = (df['month'] == 12).astype(int)
df.loc[:, 'is_weekend'] = df['weekday'].isin([5, 6]).astype(int)
df.loc[:, 'is_long_brand'] = (df['brand_length'] > df['brand_length'].median()).astype(int)

# Normalization
scaler = StandardScaler()
numeric_cols = ['retail_price', 'discounted_price', 'discount_percentage', 'brand_length']
df[[f'{col}_norm' for col in numeric_cols]] = scaler.fit_transform(df[numeric_cols])

# Handle outliers
Q1 = df['retail_price'].quantile(0.25)
Q3 = df['retail_price'].quantile(0.75)
IQR = Q3 - Q1
df = df[(df['retail_price'] >= Q1 - 1.5 * IQR) & (df['retail_price'] <= Q3 + 1.5 * IQR)]

# Fix formats
df.loc[:, 'category_level1'] = df['category_level1'].str.lower().str.strip()
df.loc[:, 'brand'] = df['brand'].str.lower().str.strip()
df.loc[:, 'product_name'] = df['product_name'].str.lower().str.strip()

print("Final Shape:", df.shape)
print("Columns:", df.columns.tolist())

# Exploration
print("\nDataset Info:")
print("Source: Generated Flipkart Sales Data")
print("Domain: E-commerce")
print("Purpose: Analyze product pricing, categories, and ratings")

print("\nKey Columns:")
print("- category_level1: Main product category")
print("- brand: Product brand")
print("- retail_price: Original price")
print("- discounted_price: Sale price")
print("- discount_percentage: Discount offered")
print("- crawl_timestamp: Data collection time")
print("- is_clothing: Is clothing category")
print("- rating_available: Has rating")

print("\nStats:")
print(df[['retail_price', 'discounted_price', 'discount_percentage', 'brand_length']].describe())

print("\nTop Categories:")
print(df['category_level1'].value_counts().head())

print("\nTop Brands:")
print(df['brand'].value_counts().head())

# Visualization
# 1. Bar Plot
plt.figure(figsize=(10, 6))
category_counts = df['category_level1'].value_counts().head(10)
plt.bar(category_counts.index, category_counts.values, color='skyblue')
plt.title("Top 10 Product Categories")
plt.xlabel("Category")
plt.ylabel("Count")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('/content/bar_plot.png')
plt.show()
print("Bar Plot: Shows category frequency. Identifies popular products.")

# 2. Line Plot
monthly_discount = df.groupby('month')['discount_percentage'].mean()
plt.figure(figsize=(10, 6))
plt.plot(monthly_discount.index, monthly_discount.values, marker='o', color='green')
plt.title("Average Discount Percentage by Month")
plt.xlabel("Month")
plt.ylabel("Average Discount (%)")
plt.grid(True)
plt.tight_layout()
plt.savefig('/content/line_plot.png')
plt.show()
print("Line Plot: Tracks discount trends.")

# 3. Scatter Plot
plt.figure(figsize=(8, 6))
sample_df = df.sample(1000, random_state=42)
plt.scatter(sample_df['retail_price'], sample_df['discount_percentage'], c=sample_df['is_clothing'], cmap='bwr', alpha=0.5)
plt.title("Retail Price vs. Discount Percentage")
plt.xlabel("Retail Price")
plt.ylabel("Discount Percentage")
plt.colorbar(label='Clothing (1) vs. Other (0)')
plt.tight_layout()
plt.savefig('/content/scatter_plot.png')
plt.show()
print("Scatter Plot: Shows pricing vs. discount patterns.")

# 4. Histogram
plt.figure(figsize=(8, 6))
plt.hist(df['retail_price'], bins=30, color='purple', edgecolor='black')
plt.title("Retail Price Distribution")
plt.xlabel("Retail Price")
plt.ylabel("Frequency")
plt.tight_layout()
plt.savefig('/content/histogram.png')
plt.show()
print("Histogram: Shows price spread.")

# 5. Box Plot
plt.figure(figsize=(10, 6))
sns.boxplot(x='category_level1', y='discount_percentage', data=df[df['category_level1'].isin(df['category_level1'].value_counts().head(5).index)])
plt.title("Discount Percentage by Category")
plt.xlabel("Category")
plt.ylabel("Discount Percentage")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('/content/box_plot.png')
plt.show()
print("Box Plot: Compares discounts.")

# 6. Pie Chart
plt.figure(figsize=(8, 8))
brand_counts = df['brand'].value_counts().head(5)
plt.pie(brand_counts.values, labels=brand_counts.index, autopct='%1.1f%%', colors=['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#ffb3e6'])
plt.title("Top 5 Brands")
plt.tight_layout()
plt.savefig('/content/pie_chart.png')
plt.show()
print("Pie Chart: Shows brand proportions.")

# 7. Heatmap
plt.figure(figsize=(10, 8))
corr_cols = ['retail_price', 'discounted_price', 'discount_percentage', 'brand_length', 'is_clothing', 'is_electronics']
sns.heatmap(df[corr_cols].corr(), annot=True, cmap='Blues', fmt='.2f')
plt.title("Correlation Heatmap")
plt.tight_layout()
plt.savefig('/content/heatmap.png')
plt.show()
print("Heatmap: Shows variable relations.")

# Analysis
# Outliers
df['z_score'] = (df['discount_percentage'] - df['discount_percentage'].mean()) / df['discount_percentage'].std()
print("\nOutliers (Z-score > 3):", len(df[np.abs(df['z_score']) > 3]))

# Box Plot
plt.figure(figsize=(8, 6))
sns.boxplot(y=df['discount_percentage'])
plt.title("Discount Percentage Box Plot")
plt.savefig('/content/discount_box_plot.png')
plt.show()
print("Box Plot: Shows discount spread.")

# Trend
hourly_discount = df.groupby('hour')['discount_percentage'].mean()
print("\nHourly Trend:")
print(hourly_discount)

# Distribution
plt.figure(figsize=(8, 6))
sns.kdeplot(df['discount_percentage'], color='blue', label='Discount Percentage')
plt.title("Discount Percentage KDE")
plt.xlabel("Discount Percentage")
plt.legend()
plt.savefig('/content/kde_plot.png')
plt.show()
print("KDE: Shows discount distribution.")

# Correlations
print("\nCorrelations:")
print(df[corr_cols].corr()['discount_percentage'])

# Conclusion
print("\nConclusion:")
print("- Clothing and electronics are prevalent categories.")
print("- Discounts vary, with peaks in certain months.")
print("- Prices range widely, with clothing often discounted.")
print("- Many products lack ratings, impacting analysis.")
print("- Recommendations: Boost electronics promotions, improve rating collection.")